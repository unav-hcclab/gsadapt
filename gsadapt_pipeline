#### R script used in Barace et al. Biomolecules 2024 ####

### gsadapt functions applied to metabolic gene sets in the TCGA-LIHC cohort ###

##### CHECKING PACKAGES AND DEPENDENCIES

packages_to_check <- c('igraph', 'dplyr', 'tidyverse', 'grDevices', 'magrittr')
bioc_packages_to_check <- c('msigdbr', 'clusterProfiler')
check_install_package <- function(pkg_name) {
  if (!requireNamespace(pkg_name, quietly = TRUE)) {
    install.packages(pkg_name, dependencies = TRUE)
    library(pkg_name, character.only = TRUE)
  }
  else {
    library(pkg_name, character.only = TRUE)
  }
}
check_install_bioc_package <- function(pkg_name) {
  if (!requireNamespace(pkg_name, quietly = TRUE)) {
    BiocManager::install(pkg_name, update = FALSE)
    library(pkg_name, character.only = TRUE)
  }
  else {
    library(pkg_name, character.only = TRUE)
  }
}
lapply(c(packages_to_check, bioc_packages_to_check), function(pkg) {
  if (pkg %in% bioc_packages_to_check) {
    check_install_bioc_package(pkg)
  } else {
    check_install_package(pkg)
  }
})

##### DEFINING DIRECTORIES AND IMPORTING DATA

dir.raw <- "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_raw/"
dir.input <- "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_raw/"
dir.output <- "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/"

##### data prep ####
LIHC.cpm0 <- read.csv2(paste0(dir.raw,"LIHC_cpm_wodup.csv"))  
rownames(LIHC.cpm0) <- LIHC.cpm0$gene_id
LIHC.cpm <- LIHC.cpm0[,8:length(LIHC.cpm)]

##### metadata prep ####
metadata_LIHC <- readxl::read_excel(paste0(dir.raw,"Metadata_TCGA_LIHC_ref.xlsx"), sheet=2)
metadata_LIHC.tumor <- metadata_LIHC %>%  
  filter(Submitter_id_Samples %in% colnames(LIHC.cpm)) %>% 
  filter(primary_diagnosis.diagnoses == 'Hepatocellular carcinoma, NOS' | 
           primary_diagnosis.diagnoses == 'Hepatocellular carcinoma, spindle cell variant' |
           primary_diagnosis.diagnoses == 'Hepatocellular carcinoma, clear cell type') %>%
  filter(sample_type.samples == 'Primary Tumor')

LIHC.cpm.t <- LIHC.cpm %>% dplyr::select(metadata_LIHC.tumor$Submitter_id_Samples) 


##### Signature prep ####
## Metabolism
MetAtlas<-read.csv2(paste0(dir.raw,"Metabolic_atlas.csv")) %>% dplyr::select(gs_name, gene_symbol) # Isolated and Transport Reactions are two coul-de-sac gene sets that were excluded from the Metabolic Atlas
MSigDB.metab<-read.csv2(paste0(dir.input,"msigdb_metabolic_gslist.csv"))
All.metab.gs <- rbind(MetAtlas,MSigDB.metab)

#### Running the method in three steps ####

###### STEP1 - Computing graphs #####
computed_gs <- gsad_compute(data = LIHC.cpm,
                                    gene_sets = All.metab.gs,
                                    CCIM = 0.4,
                                    RES = 1,
                                    k_coeff.l = 0.2,
                                    label_analysis = 'comp_metab_lihc_t_ccim04_res1_k02',
                                    dir.output = "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/")

###### STEP2 - GSEA hypergeometrics: making the universe of gene sets #####
gs_universe <- gsad_make_universe(specie = "Homo sapiens", msigdbcollections = c("H", "C2", "C5"),
                                  nonmsigdb_genesets = MetAtlas)

###### STEP2 - GSEA hypergeometrics: enrichment #####
computed_enriched_gs <- gsad_enrich (computed_gs = computed_gs, gs_universe = gs_universe,
                                     label_analysis = 'comp_enrich_metab_lihc_t_ccim04_res1_k02',
                                     dir.output = "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/")

###### STEP3 - Since gsad_enrich is demanding, we can start doing the final selection by uploading already enriched gene sets #####
computed_gs <- read.csv2(paste0(dir.output,'computed_metab_lihc_t_ccim04_res1_k02_20240411.csv'))
computed_enriched_gs <- read.csv2(paste0(dir.output,'computed_enriched_metab_lihc_t_ccim04_res1_k02_20240411.csv'))

###### STEP3 - Merging metrics and selecting based on number of genes and of central genes #####
comp_enrich_selected_gs <- gsad_select(computed_gs = computed_gs.lihc,computed_enriched_gs = computed_enriched_gs.lihc,
                                       label_analysis = 'computed_enriched_selected_metab_lihc_t_ccim04_res1_k02', 
                                       min_total = 5,
                                       min_central = 1,
                                       dir.output = "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/")

comp_enrich_selected_gs.lihc.t <-comp_enrich_selected_gs[[1]]
comp_enrich_unselected_gs.lihc.t <-comp_enrich_selected_gs[[2]]
comp_enrich_merged_gs.lihc.t <-na.omit(comp_enrich_selected_gs[[3]])


#### Functions ####

##### GSAD_COMPUTE ####
### gsad_compute returns the graph metrics of each gene set in 'gene_sets' in relation to a gene expression matrix 'data'
gsad_compute <- function(data = data, gene_sets = gene_sets,
                          CCIM = 0.4, RES = 1, k_coeff.l = 0.2,
                          label_analysis = 'computed_',
                          dir.output = "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/") {
  
  ##### Check and install required packages ####
  packages_to_check <- c('igraph', 'dplyr', 'tidyverse', 'grDevices', 'magrittr','plyr')
  bioc_packages_to_check <- c('msigdbr', 'clusterProfiler')
  check_install_package <- function(pkg_name) {
    if (!requireNamespace(pkg_name, quietly = TRUE)) {
      install.packages(pkg_name, dependencies = TRUE)
      library(pkg_name, character.only = TRUE)
    }
  }
  check_install_bioc_package <- function(pkg_name) {
    if (!requireNamespace(pkg_name, quietly = TRUE)) {
      BiocManager::install(pkg_name, update = FALSE)
      library(pkg_name, character.only = TRUE)
    }
  }
  lapply(c(packages_to_check, bioc_packages_to_check), function(pkg) {
    if (pkg %in% bioc_packages_to_check) {
      check_install_bioc_package(pkg)
    } else {
      check_install_package(pkg)
    }
  })
  ##### packages checked ####
  
  
  # Make title for the outputs
  title_out <- paste0(label_analysis,'_',format(Sys.Date(),"%Y%m%d"))
  
  # Preprocess gene sets data
  colnames(gene_sets) <- c("gs_name", "gene_symbol")
  gene_sets$gs_name <- as.factor(gene_sets$gs_name)
  pathway <- unique(gene_sets$gs_name)
  
  final_list <- list()
  prefinal.list <- list()
  
  exclude_genes <- function(cor_matrix, threshold) {
    diag(cor_matrix) <- 0
    no_corr_genes <- rowSums(cor_matrix >= threshold) <2
    cor_matrix[no_corr_genes, ] <- 0
    cor_matrix[, no_corr_genes] <- 0
    cor_matrix[cor_matrix < 0] <- 0
    genes0 <- which(rowSums(cor_matrix == 0) == ncol(cor_matrix))
    cor_matrix <- cor_matrix[-genes0,-genes0]
    return(cor_matrix)
  }
  
  
  for (i in pathway) {
    pathway <- gene_sets %>% dplyr::filter(gs_name == i)
    selected_genes <- na.omit(data[unique(pathway$gene_symbol), ])
    selected_genes2 <- t(selected_genes)
    correlations <- stats::cor(selected_genes2, method = "spearman")
    correlations[is.na(correlations)] <- 0
    genes_input <- rownames(correlations)
    
    
    for (ccim in CCIM) {
      correlations3 <- exclude_genes(correlations, ccim)
      for (res in RES) {
        print(paste0("CCIM > ",ccim," RES > ",res,"--->> computing metrics for ", i))
        list <- list()
        
        #original metrics
        thresholds_res_ccim <- c(paste0(res,"_",ccim))
        thresholds_ccim_res <- c(paste0(ccim,"_",res))
        original_gene_id <- paste(pathway$gene_symbol, collapse = ",")
        original_n_genes <- c(nrow(pathway))
        original_mmgc <- c(median(na.omit(as.vector(correlations))))
        original_mggv <- c(mean(var(na.omit(as.vector(correlations)))))
        
        #graph
        net <- igraph::graph_from_adjacency_matrix(correlations3, weighted = TRUE, mode = "undirected", diag = FALSE) 
        ec <- igraph::eigen_centrality(net, directed = FALSE, weights = NULL)
        #central_gene <- names(which.max(ec$vector))
        louvain_communities <- igraph::cluster_louvain(net, resolution = res)
        louvain_size <- igraph::sizes(louvain_communities)
        membership <- igraph::membership(louvain_communities)
        
        #metrics and genes for each cluster
        for (j in 1: length(louvain_communities)) {
          print(paste0("computing graph metrics for community ", j))
          genes_commun <- names(membership[which(membership==j)])
          n_genes_commun <- length(genes_commun)
          ec_commun <- ec$vector[genes_commun]
          ec_max <- max(ec_commun)
          sorted_ec_commun <- sort(ec_commun, decreasing = TRUE)
          central_gene <- names(sorted_ec_commun)[1]
          core_genes_top3 <- names(sorted_ec_commun)[1:3]
          core_genes_09 <- names(sorted_ec_commun[which(sorted_ec_commun>sorted_ec_commun[1]*0.9)])
          all.genes.lab <- paste(genes_commun, collapse = ",")
          core_genes.lab <- paste(core_genes_top3, collapse = ",")
          core_genes_09.lab <- paste(core_genes_09, collapse = ",")
          c_gene.lab <- paste(central_gene, collapse = ",")
          central_gs_name.lab <- paste0(c_gene.lab,"_",i)
          
          correlations4 <- 0
          
          if (length(ec_commun) > 2)  {
            correlations4 <- correlations[genes_commun,genes_commun]
            diag(correlations4) <- NA
            correlations4[lower.tri(correlations4)] <- NA
            correlation_values <- na.omit(as.vector(correlations4))
            mggc <- c(median(correlation_values))
            mggv <- c(mean(var(correlation_values)))
            n_genes <- length(genes_commun)
            k_coeff <- c(length(genes_commun)/nrow(pathway))
          } else { 
            correlation_values <-NA
            mggc <- NA
            mggv <- NA
            n_genes <- NA
            k_coeff <- NA
          }
        
          # Store results in a data frame
          list[[length(list)+1]] <- list(
            c_gs_name = central_gs_name.lab,
            gs_name = i, 
            o_gene_ids = original_gene_id, 
            o_n = original_n_genes, 
            o_mggc = original_mmgc, 
            o_mggv = original_mggv,
            res_ccim = thresholds_res_ccim,
            ccim_res = thresholds_ccim_res,
            gene_id = all.genes.lab, 
            core_genes = core_genes.lab,
            core_genes_09 = core_genes_09.lab,
            central = c_gene.lab,
            n = n_genes, 
            mggc = mggc, 
            mggv = mggv,
            k_coeff = k_coeff
                            )
        }
        final_list <- c(final_list,list)
      }
    }
  }
  computed_gs <- na.omit(do.call(rbind, lapply(final_list, data.frame)))
  computed_gs <- computed_gs %>% dplyr::filter(k_coeff>k_coeff.l)
  computed_gs <- plyr::arrange(computed_gs, gs_name, res_ccim)
  write.csv2(computed_gs,paste0(dir.output,title_out,'.csv'))
  return(computed_gs)
}

##### GSAD_UNIVERSE ####
gsad_make_universe <- function (specie = "Homo sapiens", msigdbcollections = c("H", "C2"),
                                nonmsigdb_genesets = MetAtlas) {
    MSigDB <- lapply(msigdbcollections, function(category) {
      msigdbr(species = specie, category = category) %>%
        select(gs_name, gene_symbol)})
  MSigDB.all <- bind_rows(MSigDB)
  All.Sig <- bind_rows(MSigDB.all,nonmsigdb_genesets)
  return(All.Sig)
}

##### GSAD_ENRICH ####
### gsad_enrich returns the enrichment metrics of each gene set in a gsad_computed gene set in relation to the universe of gene sets in msigdb and other custom gene sets
gsad_enrich <- function(computed_gs = data, gs_universe = gs_universe,
                        label_analysis = 'computed_enriched_',
                        dir.output = "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/"){
  
  title_out <- paste0(label_analysis,'_',format(Sys.Date(),"%Y%m%d"))
  packages_to_check <- c('igraph', 'plyr','dplyr', 'tidyverse', 'grDevices', 'magrittr')
  bioc_packages_to_check <- c('msigdbr', 'clusterProfiler')
  check_install_package <- function(pkg_name) {
    if (!requireNamespace(pkg_name, quietly = TRUE)) {
      install.packages(pkg_name, dependencies = TRUE)
    }
    library(pkg_name, character.only = TRUE)
  }
  check_install_bioc_package <- function(pkg_name) {
    if (!requireNamespace(pkg_name, quietly = TRUE)) {
      BiocManager::install(pkg_name, update = FALSE)
    }
    library(pkg_name, character.only = TRUE)
  }
  
  lapply(c(packages_to_check, bioc_packages_to_check), function(pkg) {
    if (pkg %in% bioc_packages_to_check) {
      check_install_bioc_package(pkg)
    } else {
      check_install_package(pkg)
    }
  })
  
  compute_enrichment <- function(i) {
  print(paste("Processing row", i, "of", nrow(computed_gs)))
  
  # Compute enrichment for the current row
  summary_test <- clusterProfiler::enricher(gene = unlist(strsplit(computed_gs$gene_id[i], ',')), TERM2GENE = gs_universe, minGSSize = 5)
  gs_name <- computed_gs$gs_name[i]
  c_gs_name  <- computed_gs$c_gs_name[i]
  rank_gsea <- summary_test@result[1,]     
  rank_gsea$logpadjdiff <- log(summary_test@result[1,6])/log(summary_test@result[2,6])
  rank_gsea$rank1_yes <- paste(computed_gs$gs_name[i]==rank_gsea$ID[1])
  gs_w_rank <- cbind(c_gs_name,gs_name,rank_gsea)
  return(gs_w_rank)
}

result_list <- lapply(1:nrow(computed_gs), compute_enrichment)
result_df <- do.call(rbind, result_list)
write.csv2(result_df,paste0(dir.output,title_out,'.csv'))
return(result_df)
}

##### GSAD_SELECT 
gsad_select <- function(computed_gs = data1, computed_enriched_gs =data2,
                        label_analysis = 'computed_enriched_',
                        min_total = 10,
                        min_central = 1,
                        dir.output = "/Users/jargemib/Documents/R projects/sergio_scripts/sergio_out/"){
  title_out <- paste0(label_analysis,'_',format(Sys.Date(),"%Y%m%d"))
  enriched <- computed_enriched_gs
  enriched$gs_name_gsea_rk1 <- enriched$ID
  enriched2 <- enriched %>% select(c_gs_name,gs_name_gsea_rk1,rank1_yes,GeneRatio,BgRatio,pvalue,p.adjust,qvalue)
  computed_enriched <- dplyr::right_join(computed_gs, enriched2, by = 'c_gs_name')
  computed_enriched$central_name <- paste0(computed_enriched$central,'_signature')
  computed_enriched %>% select(central_name,c_gs_name,gs_name,o_gene_ids,o_n,o_mggc,o_mggv,gene_id, res_ccim, 
                               core_genes_09,
                               central,n,k_coeff,gs_name_gsea_rk1,rank1_yes,GeneRatio,BgRatio,pvalue,
                               p.adjust,qvalue)
  selected <- computed_enriched %>% filter(rank1_yes==TRUE)
  
  selected.variables <- selected %>% dplyr::select(central_name,gs_name,gene_id,core_genes_09,central)


    merge_by_central <- function(i, data) {
    data <- selected.variables %>% filter(central_name == i)
    central_name <- unique(data$central_name)
    
    gene_ids <- unique(unlist(strsplit(data$gene_id, ',')))
    core09_gene_ids <- unique(unlist(strsplit(data$core_genes_09, ',')))
    
    if (length(gene_ids)<min_total) { # here we set a minimum of genes for a signature
      central_name <- NA
    } else{
      if (length(core09_gene_ids)<min_central) { # here we set a minimum of central genes for a signature
        central_name <- NA
      } else{
      } 
    }
    
    central_gene_id <- unique(data$central)
    original_gs <- unique(data$gs_name)
    return(data.frame(central_name = central_name,
                              gene_ids = paste(gene_ids, collapse = ",") ,
                              core09_gene_ids = paste(core09_gene_ids,collapse = ","),
                              central_gene_id = central_gene_id,
                      original_gs = paste(original_gs, collapse = ",")
                              ))
  }
  
  merged <- lapply(unique(selected.variables$central_name),merge_by_central, data = selected.variables)
  merged2 <- do.call(rbind, merged)
  merged3 <- na.omit(merged2)
  
  unselected <- computed_enriched %>% filter(rank1_yes==FALSE)
  write.csv2(selected,paste0(dir.output,'selected_',title_out,'.csv'))
  write.csv2(merged3,paste0(dir.output,'merged_',title_out,'.csv'))
  write.csv2(unselected,paste0(dir.output,'unselected_',title_out,'.csv'))
  
  return(list(selected = selected,unselected = unselected,merged = merged3))
}


